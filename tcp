chapter3 - ip and port number
ipv4 - 4byte address
ipv6 - 16byte address

ipv4 -> network address + host address
ipv4 -> A,B,C,D,E class (A = network 1byte, host 3byte)

network address (211,213,216) -> router -> host address(210)
Aclass -> first byte = 0~127, 0111 1111
Bclass ->    "       = 128~191, 1011 1111
Cclass ->    "       = 192~223, 1101 1111

IP -> NIC(Network Interface Card) -> Os refer to port -> socket
port -> distinguish socket for one OS (0 ~ 65535)
	it can't be same port num  
 well-known port Num (0~1023) can't use for port
 if tcp has 1024 port, udp can use 1024 port
 
 struct sockaddr_in{
 	sa_family_t sin_family;
 	uint16_t sin_port;
 	struct in_addr sin_addr;
 	char sin_zero[8] // x
 }
 sin_family : AF_INET (ipv4), AF_INET6 (ipv6), AF_LOCAL (unix for local communicate)
 sin_port : port num, 16bit
 sin_addr : ip_address, 32bit
 sin_zero : no means, setting 0
 
 Network Byte Order -> cpu has different store data Order in memory by OS
 data = 0x12345678
 Big Endian -> 0x20 0x21 0x22 0x23
 		0x12 0x34 0x56 0x78
 Little Endian ->0x78 0x56 0x34 0x12
 
 BigEndian comp -> 0x1234 -> LittleEndian comp 0x3412
 this is why Network Byte Order is used to Big Endian order
 
 rinux long ==> 4byte.
 htons(unsigned short); host byte order --> network byte order(big endian)
 htonl(unsigned long);
 amd and intel cpu --> little endian
 data transmit -> auto apply network byte order
 
 inet_addr --> "211,223,44,3" => 32bit int type (NBO);
 inet_aton(char *string, struct in_addr *addr);
 char *inet_ntoa(char *string) -> 32bit -> ip string
 htonl(INADDR_ANY); server IP auto 
 
 
chapter 4,5 - TCP and UDP
TCP/IP Protocol stack : Link -> ip -> TCP,UDP -> application (4 hierarchy)
Open System ? designed based on several standards.

Server.c must have two socket -> 1. server.socket 2. accept.socket
client connect();'s return does not mean server's call accept();
client's ip and port reset ? : call connect(), in OS(Kernel)
Iterative Server -->  loop accept() ~ close(client_sock);

tcp does not have data bound. --> read(), write() discord. (write 3, read 1)
tcp -> sliding window 
input buffer upper data doesn't occur
write() reuturn : output buffer move clear.
Tcp : three way handshaking(start) , four way handshaking(end)
SEQ, ACK = SEQ + data byte + 1 , first message : SYN (synchronization);
FIN : terminate;

chapter 6 - UDP
UDP --> Flow Control x, connect setting x

TCP/IP protocol Inner?? :
Udp need to destination address setting.
sendto(); recvfrom();
sendto() -->  udp client auto assignment address to socket
UDP must func(sendto() , recvfrom()) same call count.
datagram ? udp send packet
connected UDP : connect();

chapter 7 - TCP Half-close
shutdown(int sock, int howto);


chapter 8 - Domain Name System
 IP and Domain name convert each other by DNS 
 local DNS IP : terminal -> nslookup -> server
 if default DNS server did not know domain's ip, it asked to up hierarchy DNS server
 DNS is  Hierarchical of distribute database system.

 domain name to ip address ->  struct hostent * gethostbyname(char *hostname);
 in hostent struct
 1. h_name : official domain name
 2. h_aliases : one ip can have two domain name, other domain name
 3. h_addrtype : ipv4, or ,ipv6
 4. h_length : ipv4 = 4byte , ipv6 = 16byte
 5. h_addr_list : domain name to Intger ip address 

 inet_ntoa(*(struct in_addr*)host->h_addr_list[i]);
 h_addr_list -> &in_addr struct.
 ip address to domain name -> struct hostent * gethostbyaddr(const char *addr, socklen_t len, int family);

chapter 9 - socket's option and buffer size 
socket option has hierarchy
IPPROTO_IP, IPPROTO_TCP, SOL_SOCKET
state = setsockopt(sock,SOL_SOCKET, SO_RCVBUF, (void *)&rcv_buf, sizeof(rcv_buf));
state = getsockopt(sock,SOL_SOCKET, SO_SNDBUF, (void *)&snd_buf, &len);
SOL_SOCKET -> SO_REUSEADDR : can use again port that using in Time-wait, (default 0, --> 1);
Four-way handshaking has occur, after socket does not erase, --> time-wait state 
Time-wait state is occur to first terminate offer host.

Nagle Algorithm : data -> ACK -> data -> ACK
TCP default applys Nagle.
don't use Nagle algo --> network traffic issue.
TCP_NODEALY -> True 1 = Nagle Algo off.

chapter 10 - process
1. multiprocess server 2. multiflexing server 3. multithreading server
PID -> process per ID.
fork(); --> create process
parent pork() return : child process ID, PID > 0
child pork() return : 0.

Zombie process.
background processing : consol ./~ & --> can add order.
pid_t wait(); -> if end of child proc, return to parameter( &address)
WIFEXITED() : if child process terminate, return true.
WEXITSTATUS() : child process return value.
wait(); -> if exit child process is not exist, blocking status.

signal handling -> if siganl is occur, os send message to process.
signal(int signo, void(*func)(int)); 
int signo -> 1. SIGALRM 2. SIGINT 3. SIGCHLD
				alarm       ctrl+c    child proc end.
signal handler -> if signal is occur, func call.
process does not call func when it is sleep();, so if siganl is occur, process wakeup()
sigaction();
struct sigaction -> sa_handler, sa_mask, sa_flags
if using fork func(), server.c -> clnt_sock fd, client.c -> serv_sock fd close.

chapter 11 - process commuication
two process can approximate at the same time memory
pipe(int filedes[2]);
full duplex commuication : make two pipe.
fds[0] == read, fds[1] == write.

chpater 12 - multiflexing server
multiprocess disadvantage : much calculate, process has per memory space, 
select() func : filediscriptor collect need to recv, send, except  ==> fd_set type
FD_ZERO, FD_SET, FD_CLR, FD_ISSET
FD_ZERO : fd_set variable's all bit to zero.
FD_SET : variable address to parameter for set filediscriptor
FD_CLR : filediscriptor clr.
FD_ISSET : fd has true, return > 0

int select(int maxfd, fd_set *readset, fd_set *writeset, fd_set *exceptset, const struct timeval * timeout);
maxfd : max filediscriptor
readset : recv data existence.
writeset : non blocking data send existence.
exceptset : except situation to occur existence.
return ? : error -1, timeout 0

chapter 13 - send & recv input,output func
send(int sockfd, buf, bytes, flags);
flags -> option.
1.MSG_OOB -> out-of-band data.
2.MSG_PEEK -> input buffer data existence check.
3.MSG_DONTROUTE 
4.MSG_DONTWAIT
5.MSG_WAITALL
fcntl(recv_sock, F_SETOWN, getpid());
one socket filediscriptor can be another process fd.
getpid() can make signal to one process.
writev(), readv() can write and read once time.
struct iovec vec[];
vec[].iov_base = buf;
vec[].iov_len = len;

chapter 14 - multicast
multicast is based on UDP.
server send data to multicast group one time. group of all client can receive data.
multicast can same area, no same data more than two packet.
multicast using to multi media data for live sending.

